const quotes = {
  tech: [
    "self.teach();",
    "study.then(relax).catch(stress);",
    "chances.forEach(chance => chance.take());",
    "import {luck} from life",
    "sleep --;\nproductivity ++;",
    "chances.forEach(chance => chance.take());",
    "world.Restore();",
    "priorities.sort();",
    "give();",
    "console.log(goals);",
    "study.then(relax).catch(stress);",
    "chaos.sort();",
    "chances.forEach(chance => chance.take());",
    "DELETE * FROM Memories WHERE type='bad';",
    "believe();",
    "if ( socialDistancing.isOver() ){\n\tpeople.hug();\n}",
    "import {luck} from life",
    "new Happiness( gratitude );",
    "action.take( Time.now() );",
    "action.take( Time.now() );",
    "(life*)malloc( sizeof( dreams ) );",
    "study.then(relax).catch(stress);",
    "DELETE FROM myself WHERE emotion = 'hatered';",
    "garbageCollect();",
    "idea.lock();\nexecute(idea);\nidea.unlock();",
    "focus();",
    "happiness.getInstance();",
    "quarantine.restrictions-- ;",
    "StressManager.flush();",
    "StressManager.flush();",
    "import {luck} from life",
    "alert( 'Be Grateful' );",
    "DELETE FROM myself WHERE emotion = 'hatered';",
    "bePatient();",
    "doubt.terminate();",
    "give.then( recieve );",
    "console.log( autodidacticism );\nconsole.log(autodidacticism == selfEducation);\n//Outputs 1",
    "happiness.getInstance();",
    "new Investment( self );",
    "priorities.sort();",
    "nature.CleanUp();",
    "memories.push( today );",
    "action.getFeedback();",
    "new Reality( dream );",
    "import {luck} from life",
    "alert( 'Be Grateful' );",
    "new Chance();",
    "world.Restore();",
    "const people = [ family, friends, lover ]\n spendQualityTime( people );",
    "new Reality( dream );",
    "relax();",
    "study.then(relax).catch(stress);",
    "SELECT * people WHERE attitude = 'good'",
    "bePatient();",
    "SELECT * people WHERE attitude = 'good'",
    "new Idea(knowledge,experience);",
    "new Lesson( mistake );",
    "new Chance();",
    "code();",
    "focus();",
    "enjoy();",
    "getPurpose();",
    "alert('practice makes perfect')",
    "happiness++;",
    "(life*)malloc( sizeof( dreams ) );",
    "new Idea(knowledge,experience);",
    "procrastination.end();",
    "new Chance();",
    "study.then(relax).catch(stress);",
    "console.log( 'HAPPINESS' );",
    "goals.visualize();",
    "memories.push( today );",
    "idea.lock();\nexecute(idea);\nidea.unlock();",
    "enjoy();",
    "give.then( recieve );",
    "setGoal( name, time, significance);",
    "console.log(future);",
    "work.getInstancefrom( passion );",
    "comfortZone.push();",
    "import {luck} from life",
    "study().then( execute ).then( succeed ).catch( retry );",
    "thoughts.filter( 'positive' );",
    "friends.filter( friend => friend.type === 'real')",
    "chaos.sort();",
    "const exams = university.getRest().Revise().Relax();",
    "idea.lock();\nexecute(idea);\nidea.unlock();",
    "console.log( 'HAPPINESS' );",
    "patience.getInstance();",
    "believe();",
    "self.teach();",
    "give.then( recieve );",
    "beKind();",
    "new Thought( past, present, future);",
    "study.then( practice );",
    "stayHome();",
    "read();",
    "StressManager.flush();",
    "new Investment( self );",
    "study.then(relax).catch(stress);",
    "procrastination.end();",
    "enjoy();",
    "void Overthinking(){\n\tOverthinking();\n}",
    "thoughts.filter( 'positive' );",
    "study.then( practice );",
    "console.log( autodidacticism );\nconsole.log(autodidacticism == selfEducation);\n//Outputs 1",
    "new Thought( past, present, future);",
    "believe();",
    "thoughts.filter( 'positive' );",
    "sleep --;\nproductivity ++;",
    "goals.visualize();",
    "sleep --;\nproductivity ++;",
    "(life*)malloc( sizeof( dreams ) );",
    "garbageCollect();",
    "new Reality( dream );",
    "world.Restore();",
    "chaos.sort();",
    "new Reality( dream );",
    "memories.push( today );",
    "study().then( execute ).then( succeed ).catch( retry );",
    "procrastination.end();",
    "clearYourMind();",
    "priorities.sort();",
    "study.then(relax).catch(stress);",
    "const exams = university.getRest().Revise().Relax();",
    "enjoy();",
    "new luck( work, consistency);",
    "if ( socialDistancing.isOver() ){\n\tpeople.hug();\n}",
    "quarantine.restrictions-- ;",
    "new luck( work, consistency);",
    "comfortZone.push();",
    "Happy 11111100110;",
    "code();",
    "quarantine.restrictions-- ;",
    "chaos.sort();",
    "code();",
    "alert('practice makes perfect')",
    "study().then( execute ).then( succeed ).catch( retry );",
    "self.getReflection();",
    "memories.push( today );",
    "new Idea(knowledge,experience);",
    "DELETE FROM myself WHERE emotion = 'hatered';",
    "assertTrue(time.value > money.value);",
    "chaos.sort();",
    "bePatient();",
    "if (self.getDoubt() > HEALTHY_THRESHHOLD){\n\tgoals.setDifficulty(HIGH);\n}",
    "await sign",
    "new Chance();",
    "new Thought( past, present, future);",
    "DELETE * FROM Memories WHERE type='bad';",
    "cout<< past == future << endl;\n//outputs 0",
    "overthink.init();\n//Internal Error: too much recursion",
    "path.create();",
    "DELETE FROM myself WHERE emotion = 'hatered';",
    "relax();",
    "overthink.init();\n//Internal Error: too much recursion",
    "world.Restore();",
    "smile. find( reason );",
    "setGoal( name, time, significance);",
    "bePatient();",
    "new Investment( self );",
    "new Investment( self );",
    "garbageCollect();",
    "thoughts.filter( 'positive' );",
    "path.create();",
    "believe();",
    "console.log( autodidacticism );\nconsole.log(autodidacticism == selfEducation);\n//Outputs 1",
    "const people = [ family, friends, lover ]\n spendQualityTime( people );",
    "give();",
    "DELETE * FROM Memories WHERE type='bad';",
    "new Lesson( mistake );",
    "if (self.getDoubt() > HEALTHY_THRESHHOLD){\n\tgoals.setDifficulty(HIGH);\n}",
    "study.then(relax).catch(stress);",
    "path.create();",
    "thoughts.filter( 'positive' );",
    "new Idea(knowledge,experience);",
    "console.log(goals);",
    "Happy 11111100110;",
    "void Overthinking(){\n\tOverthinking();\n}",
    "new Day(optimism);",
    "new Day(optimism);",
    "SELECT * people WHERE attitude = 'good'",
    "(life*)malloc( sizeof( dreams ) );",
    "focus();",
    "action.getFeedback();",
    "world.Restore();",
    "relax();",
    "assertTrue(time.value > money.value);",
    "world.Restore();",
    "fear.reduce();",
    "while( quarantine.length > 0 ){\n\t stayCalm();\n}",
    "self.improve();",
    "DELETE FROM myself WHERE emotion = 'hatered';",
    "enjoy();",
    "enjoy();",
    "study.then( practice );",
    "read();",
    "new Inspiration( ideas );",
    "memories.push( today );",
    "StressManager.flush();",
    "give();",
    "relax();",
    "study.then(relax).catch(stress);",
    "import {luck} from life",
    "assertTrue(time.value > money.value);",
    "await sign",
    "DELETE FROM myself WHERE emotion = 'hatered';",
    "work.getInstancefrom( passion );",
    "stressManager.reduce();",
    "comfortZone.push();",
    "const exams = university.getRest().Revise().Relax();",
    "SELECT * people WHERE attitude = 'good'",
    "(life*)malloc( sizeof( dreams ) );",
    "priorities.sort();",
    "sleep --;\nproductivity ++;",
    "setGoal( name, time, significance);",
    "if ( socialDistancing.isOver() ){\n\tpeople.hug();\n}",
    "relax();",
    "const exams = university.getRest().Revise().Relax();",
    "console.log(goals);",
    "alert( 'Be Grateful' );",
    "goals.visualize();",
    "study().then( execute ).then( succeed ).catch( retry );",
    "believe();",
    "new Investment( self );",
    "DELETE * FROM Memories WHERE type='bad';",
    "console.log( autodidacticism );\nconsole.log(autodidacticism == selfEducation);\n//Outputs 1",
    "garbageCollect();",
    "console.log( 'HAPPINESS' );",
    "focus();",
    "INSERT INTO expectations (TYPE, Description)\nVALUES ('positive','It will be alright');",
    "new Relaxation( stress );",
    "memories.push( today );",
    "if ( angry ) {\n \t silentMode.on();\n}",
    "beKind();",
    "believe();",
    "study.then(relax).catch(stress);",
    "comfortZone.push();",
    "new Reality( dream );",
    "new Inspiration( ideas );",
    "smile();",
    "study.then(relax).catch(stress);",
    "code();",
    "new Media ( filter );",
    "new Chance();",
    "stayHome();",
    "smile. find( reason );",
    "priorities.sort();",
    "new Happiness( gratitude );",
    "action.take( Time.now() );",
    "console.log(future);",
    "smile();",
    "console.log(future);",
    "world.Restore();",
    "procrastination.end();",
    "import {luck} from life",
    "self.teach();",
    "cout<< past == future << endl;\n//outputs 0",
    "new Day( hope );",
    "happiness++;",
    "study().then( execute ).then( succeed ).catch( retry );",
    "new Relaxation( stress );",
    "garbageCollect();",
    "new Chance();",
    "if ( socialDistancing.isOver() ){\n\tpeople.hug();\n}",
    "new Thought( past, present, future);",
    "new Reality( dream );",
    "give.then( recieve );",
    "stayHome();",
    "getPurpose();",
    "action.take( Time.now() );",
    "const exams = university.getRest().Revise().Relax();",
    "clearYourMind();",
    "study.then(relax).catch(stress);",
    "friends.filter( friend => friend.type === 'real')",
    "goals.visualize();",
    "import {luck} from life",
    "Happy 11111100110;",
    "const people = [ family, friends, lover ]\n spendQualityTime( people );",
    "self.getReflection();",
    "work.getInstancefrom( passion );",
    "setGoal( name, time, significance);",
    "nature.CleanUp();",
    "console.log(goals);",
    "new Relaxation( stress );",
    "assertTrue(time.value > money.value);",
    "new Skill( desire, time);",
    "Happy 11111100110;",
    "StressManager.flush();",
    "(life*)malloc( sizeof( dreams ) );",
    "StressManager.flush();",
    "patience.getInstance();",
    "give();",
    "patience.getInstance();",
    "friends.filter( friend => friend.type === 'real')",
    "self.getReflection();",
    "memories.push( today );",
    "StressManager.flush();",
    "enjoy();",
    "console.log(future);",
    "new Happiness( gratitude );",
    "import {luck} from life",
    "believe();",
    "smile();",
    "path.create();",
    "action.getFeedback();",
    "believe();",
    "self.teach();",
    "give.then( recieve );",
    "new Attitude( 'positive' );",
    "(life*)malloc( sizeof( dreams ) );",
    "self.teach();",
    "console.log( autodidacticism );\nconsole.log(autodidacticism == selfEducation);\n//Outputs 1",
    "assertTrue(time.value > money.value);",
    "new Media ( filter );",
    "give.then( recieve );",
    "void Overthinking(){\n\tOverthinking();\n}",
    "import {luck} from life",
    "new Investment( self );",
    "give.then( recieve );",
    "bePatient();",
    "new Attitude( 'positive' );",
    "self.teach();",
    "quarantine.restrictions-- ;",
    "priorities.sort();",
    "import {luck} from life",
    "new Investment( self );",
    "getPurpose();",
    "getPurpose();",
    "comfortZone.push();",
    "new Idea(knowledge,experience);",
    "new Day( hope );",
    "const exams = university.getRest().Revise().Relax();",
    "alert('stay motivated!');",
    "new Attitude( 'positive' );",
    "const exams = university.getRest().Revise().Relax();",
    "new Inspiration( ideas );",
    "stayHome();",
    "new Investment( self );",
    "study.then( practice );",
    "overthink.init();\n//Internal Error: too much recursion",
    "DELETE * FROM Memories WHERE type='bad';",
    "SELECT * people WHERE attitude = 'good'",
    "relax();",
    "study.then(relax).catch(stress);",
    "happiness.getInstance();",
    "study.then( practice );",
    "new Skill( desire, time);",
    "new Happiness( gratitude );",
    "Happy 11111100110;",
    "DELETE FROM myself WHERE emotion = 'hatered';",
    "new Attitude( 'positive' );",
    "while( quarantine.length > 0 ){\n\t stayCalm();\n}",
    "fear.reduce();",
    "alert('stay motivated!');",
    "const exams = university.getRest().Revise().Relax();",
    "while( quarantine.length > 0 ){\n\t stayCalm();\n}",
    "if ( socialDistancing.isOver() ){\n\tpeople.hug();\n}",
    "action.take( Time.now() );",
    "new Achievement( work, time);",
    "idea.lock();\nexecute(idea);\nidea.unlock();",
    "garbageCollect();",
    "self.respect();",
    "stressManager.reduce();",
    "bePatient();",
    "void Overthinking(){\n\tOverthinking();\n}",
    "happiness.getInstance();",
    "setGoal( name, time, significance);",
    "happiness.getInstance();",
    "new Inspiration( ideas );",
    "setGoal( name, time, significance);",
    "work.getInstancefrom( passion );",
    "path.create();",
    "stressManager.reduce();",
    "nature.CleanUp();",
    "cout<< past == future << endl;\n//outputs 0",
    "DELETE FROM thoughts WHERE category = 'negative'",
    "if ( angry ) {\n \t silentMode.on();\n}",
    "new Attitude( 'positive' );",
    "world.Restore();",
    "import {luck} from life",
    "fear.reduce();",
    "new Investment( self );",
    "enjoy();",
    "read();",
    "console.log( 'HAPPINESS' );",
    "read();",
    "const people = [ family, friends, lover ]\n spendQualityTime( people );",
    "console.log( 'HAPPINESS' );",
    "new Idea(knowledge,experience);",
    "chances.forEach(chance => chance.take());",
    "const people = [ family, friends, lover ]\n spendQualityTime( people );",
    "study.then(relax).catch(stress);",
    "idea.lock();\nexecute(idea);\nidea.unlock();",
    "new luck( work, consistency);",
    "quarantine.restrictions-- ;",
    "assertTrue(time.value > money.value);",
    "self.respect();",
    "(life*)malloc( sizeof( dreams ) );",
    "console.log(goals);",
    "enjoy();",
    "laziness.abort();",
    "study().then( execute ).then( succeed ).catch( retry );",
    "if (self.getDoubt() > HEALTHY_THRESHHOLD){\n\tgoals.setDifficulty(HIGH);\n}",
    "sleep --;\nproductivity ++;",
    "new Skill( desire, time);",
    "(life*)malloc( sizeof( dreams ) );",
    "SELECT * people WHERE attitude = 'good'",
    "path.create();",
    "console.log( autodidacticism );\nconsole.log(autodidacticism == selfEducation);\n//Outputs 1",
    "new Media ( filter );",
    "idea.lock();\nexecute(idea);\nidea.unlock();",
    "console.log( 'HAPPINESS' );",
    "cout<< past == future << endl;\n//outputs 0",
    "overthink.init();\n//Internal Error: too much recursion",
    "comfortZone.push();",
    "Happy 11111100110;",
    "friends.filter( friend => friend.type === 'real')",
    "self.getReflection();",
    "chances.forEach(chance => chance.take());",
    "Happy 11111100110;",
    "while( quarantine.length > 0 ){\n\t stayCalm();\n}",
    "DELETE FROM myself WHERE emotion = 'hatered';",
    "study().then( execute ).then( succeed ).catch( retry );",
    "read();",
    "if ( angry ) {\n \t silentMode.on();\n}",
    "believe();",
    "give();",
    "DELETE FROM thoughts WHERE category = 'negative'",
    "new Thought( past, present, future);",
    "priorities.sort();",
    "believe();",
    "self.teach();",
    "import {luck} from life",
    "new Chance();",
    "if ( angry ) {\n \t silentMode.on();\n}",
    "action.take( Time.now() );",
    "enjoy();",
    "(life*)malloc( sizeof( dreams ) );",
    "new Investment( self );",
    "cout<< past == future << endl;\n//outputs 0",
    "while( quarantine.length > 0 ){\n\t stayCalm();\n}",
    "code();",
    "new Relaxation( stress );",
    "const people = [ family, friends, lover ]\n spendQualityTime( people );",
    "stayHome();",
    "smile();",
    "assertTrue(time.value > money.value);",
    "self.respect();",
    "new Day(optimism);",
    "study.then( practice );",
    "SELECT * people WHERE attitude = 'good'",
    "assertTrue(time.value > money.value);",
    "idea.lock();\nexecute(idea);\nidea.unlock();",
    "setGoal( name, time, significance);",
    "comfortZone.push();",
    "new Day(optimism);",
    "getPurpose();",
    "action.getFeedback();",
    "while( quarantine.length > 0 ){\n\t stayCalm();\n}",
    "thoughts.filter( 'positive' );",
    "alert('practice makes perfect')",
    "self.getReflection();",
    "new Reality( dream );",
    "if ( angry ) {\n \t silentMode.on();\n}",
    "goals.visualize();",
    "give.then( recieve );",
    "self.improve();",
    "comfortZone.push();",
    "new Thought( past, present, future);",
    "self.improve();",
    "thoughts.filter( 'positive' );",
    "path.create();",
    "fear.reduce();",
    "setGoal( name, time, significance);",
    "alert('stay motivated!');",
    "idea.lock();\nexecute(idea);\nidea.unlock();",
    "clearYourMind();",
    "give();",
    "self.teach();",
    "void Overthinking(){\n\tOverthinking();\n}",
    "fear.reduce();",
    "study().then( execute ).then( succeed ).catch( retry );",
    "study.then( practice );",
    "sleep --;\nproductivity ++;",
    "stayHome();",
    "happiness.getInstance();",
    "self.improve();",
    "smile();",
    "give();",
    "(life*)malloc( sizeof( dreams ) );",
    "console.log( autodidacticism );\nconsole.log(autodidacticism == selfEducation);\n//Outputs 1",
    "new Attitude( 'positive' );",
    "assertTrue(time.value > money.value);",
    "assertTrue(time.value > money.value);",
    "memories.push( today );",
    "new luck( work, consistency);",
    "new Reality( dream );",
    "import {luck} from life",
    "new Reality( dream );",
    "believe();",
    "action.getFeedback();",
    "DELETE FROM thoughts WHERE category = 'negative'",
    "self.improve();",
    "new Day(optimism);",
    "DELETE FROM myself WHERE emotion = 'hatered';",
    "new Happiness( gratitude );",
    "action.take( Time.now() );",
    "SELECT * people WHERE attitude = 'good'",
    "patience.getInstance();",
    "DELETE FROM myself WHERE emotion = 'hatered';",
    "const exams = university.getRest().Revise().Relax();",
    "new Skill( desire, time);",
    "cout<< past == future << endl;\n//outputs 0",
    "procrastination.end();",
    "doubt.terminate();",
    "priorities.sort();",
    "console.log( autodidacticism );\nconsole.log(autodidacticism == selfEducation);\n//Outputs 1",
    "new luck( work, consistency);",
    "new Skill( desire, time);",
    "while( quarantine.length > 0 ){\n\t stayCalm();\n}",
    "getPurpose();",
    "new Relaxation( stress );",
    "setGoal( name, time, significance);",
    "StressManager.flush();",
    "DELETE FROM thoughts WHERE category = 'negative'",
    "code();",
    "sleep --;\nproductivity ++;",
    "(life*)malloc( sizeof( dreams ) );",
    "smile();",
    "procrastination.end();",
    "getPurpose();",
    "new Happiness( gratitude );",
    "garbageCollect();",
    "self.improve();",
    "new Day(optimism);",
    "while( quarantine.length > 0 ){\n\t stayCalm();\n}",
    "laziness.abort();",
    "chances.forEach(chance => chance.take());",
    "doubt.terminate();",
    "clearYourMind();",
    "clearYourMind();",
    "console.log( 'HAPPINESS' );",
    "INSERT INTO expectations (TYPE, Description)\nVALUES ('positive','It will be alright');",
    "study.then(relax).catch(stress);",
    "priorities.sort();",
    "relax();",
    "focus();",
    "StressManager.flush();",
    "nature.CleanUp();",
    "new Inspiration( ideas );",
    "alert( 'Be Grateful' );",
    "while( quarantine.length > 0 ){\n\t stayCalm();\n}",
    "sleep --;\nproductivity ++;",
    "if ( angry ) {\n \t silentMode.on();\n}",
    "work.getInstancefrom( passion );",
    "SELECT * people WHERE attitude = 'good'",
    "console.log( autodidacticism );\nconsole.log(autodidacticism == selfEducation);\n//Outputs 1",
    "enjoy();",
    "give();",
    "clearYourMind();",
    "assertTrue(time.value > money.value);",
    "overthink.init();\n//Internal Error: too much recursion",
    "const exams = university.getRest().Revise().Relax();",
    "setGoal( name, time, significance);",
    "quarantine.restrictions-- ;",
    "laziness.abort();",
    "new Chance();",
    "new Idea(knowledge,experience);",
    "laziness.abort();",
    "work.getInstancefrom( passion );",
    "stayHome();",
    "study.then(relax).catch(stress);",
    "beKind();",
    "(life*)malloc( sizeof( dreams ) );",
    "happiness.getInstance();",
    "self.getReflection();",
    "new Media ( filter );",
    "code();",
    "study.then( practice );",
    "SELECT * people WHERE attitude = 'good'",
    "const exams = university.getRest().Revise().Relax();",
    "new Lesson( mistake );",
    "console.log(goals);",
    "idea.lock();\nexecute(idea);\nidea.unlock();",
    "sleep --;\nproductivity ++;",
    "doubt.terminate();",
    "assertTrue(time.value > money.value);",
    "new Chance();",
    "new Attitude( 'positive' );",
    "new Investment( self );",
    "(life*)malloc( sizeof( dreams ) );",
    "if ( socialDistancing.isOver() ){\n\tpeople.hug();\n}",
    "give.then( recieve );",
    "Happy 11111100110;",
    "if ( socialDistancing.isOver() ){\n\tpeople.hug();\n}",
    "new luck( work, consistency);",
    "chaos.sort();",
    "const exams = university.getRest().Revise().Relax();",
    "alert('practice makes perfect')",
    "comfortZone.push();",
    "chances.forEach(chance => chance.take());",
    "assertTrue(time.value > money.value);",
    "if ( socialDistancing.isOver() ){\n\tpeople.hug();\n}",
    "chaos.sort();",
    "believe();",
    "path.create();",
    "overthink.init();\n//Internal Error: too much recursion",
    "console.log(future);",
    "if (self.getDoubt() > HEALTHY_THRESHHOLD){\n\tgoals.setDifficulty(HIGH);\n}",
    "new Thought( past, present, future);",
    "happiness++;",
    "console.log( autodidacticism );\nconsole.log(autodidacticism == selfEducation);\n//Outputs 1",
    "fear.reduce();",
    "happiness.getInstance();",
    "stressManager.reduce();",
    "happiness.getInstance();",
    "new Skill( desire, time);",
    "new Inspiration( ideas );",
    "alert('practice makes perfect')",
    "thoughts.filter( 'positive' );",
    "enjoy();",
    "friends.filter( friend => friend.type === 'real')",
    "while( quarantine.length > 0 ){\n\t stayCalm();\n}",
    "goals.visualize();",
    "enjoy();",
    "new Thought( past, present, future);",
    "if ( angry ) {\n \t silentMode.on();\n}",
    "procrastination.end();",
    "new Skill( desire, time);",
    "stayHome();",
    "new Chance();",
    "INSERT INTO expectations (TYPE, Description)\nVALUES ('positive','It will be alright');",
    "enjoy();",
    "read();",
    "new luck( work, consistency);",
    "while( quarantine.length > 0 ){\n\t stayCalm();\n}",
    "stressManager.reduce();",
    "if ( socialDistancing.isOver() ){\n\tpeople.hug();\n}",
    "enjoy();",
    "self.improve();",
    "garbageCollect();",
    "new Attitude( 'positive' );",
    "new Happiness( gratitude );",
    "alert('stay motivated!');",
    "void Overthinking(){\n\tOverthinking();\n}",
    "new Skill( desire, time);",
    "new Chance();",
    "if ( socialDistancing.isOver() ){\n\tpeople.hug();\n}",
    "quarantine.restrictions-- ;",
    "console.log(goals);",
    "new Reality( dream );",
    "new Achievement( work, time);",
    "believe();",
    "path.create();",
    "assertTrue(time.value > money.value);",
    "new Relaxation( stress );",
    "quarantine.restrictions-- ;",
    "enjoy();",
    "new Achievement( work, time);",
    "stayHome();",
    "happiness++;",
    "INSERT INTO expectations (TYPE, Description)\nVALUES ('positive','It will be alright');",
    "setGoal( name, time, significance);",
    "focus();",
    "assertTrue(time.value > money.value);",
    "study().then( execute ).then( succeed ).catch( retry );",
    "const people = [ family, friends, lover ]\n spendQualityTime( people );",
    "self.getReflection();",
    "import {luck} from life",
    "new luck( work, consistency);",
    "new Achievement( work, time);",
    "doubt.terminate();",
    "action.getFeedback();",
    "self.respect();",
    "study().then( execute ).then( succeed ).catch( retry );",
    "path.create();",
    "stressManager.reduce();",
    "new Happiness( gratitude );",
    "self.getReflection();",
    "goals.visualize();",
    "DELETE FROM thoughts WHERE category = 'negative'",
    "smile. find( reason );",
    "self.getReflection();",
    "read();",
    "new Investment( self );",
    "study.then( practice );",
    "new Happiness( gratitude );",
    "work.getInstancefrom( passion );",
    "study().then( execute ).then( succeed ).catch( retry );",
    "stayHome();",
    "stayHome();",
    "smile();",
    "study.then( practice );",
    "new Thought( past, present, future);",
    "quarantine.restrictions-- ;",
    "console.log(future);",
    "self.getReflection();",
    "new luck( work, consistency);",
    "DELETE FROM myself WHERE emotion = 'hatered';",
    "bePatient();",
    "cout<< past == future << endl;\n//outputs 0",
    "import {luck} from life",
    "new Relaxation( stress );",
    "smile();",
    "garbageCollect();",
    "overthink.init();\n//Internal Error: too much recursion",
    "goals.visualize();",
    "self.improve();",
    "new Happiness( gratitude );",
    "new Attitude( 'positive' );",
    "DELETE FROM thoughts WHERE category = 'negative'",
    "give();",
    "happiness++;",
    "const people = [ family, friends, lover ]\n spendQualityTime( people );",
    "new Day( hope );",
    "console.log(future);",
    "beKind();",
    "await sign",
    "if ( angry ) {\n \t silentMode.on();\n}",
    "goals.visualize();",
    "getPurpose();",
    "new Media ( filter );",
    "new Reality( dream );",
    "memories.push( today );",
    "beKind();",
    "happiness++;",
    "world.Restore();",
    "new Reality( dream );",
    "SELECT * people WHERE attitude = 'good'",
    "give();",
    "import {luck} from life",
    "import {luck} from life",
    "self.getReflection();",
    "enjoy();",
    "new Reality( dream );",
    "alert('practice makes perfect')",
    "comfortZone.push();",
    "DELETE FROM thoughts WHERE category = 'negative'",
    "read();",
    "new Day( hope );",
    "new Day(optimism);",
    "stayHome();",
    "alert('practice makes perfect')",
    "nature.CleanUp();",
    "priorities.sort();",
    "new Lesson( mistake );",
    "StressManager.flush();",
    "new Day(optimism);",
    "assertTrue(time.value > money.value);",
    "action.take( Time.now() );",
    "if (self.getDoubt() > HEALTHY_THRESHHOLD){\n\tgoals.setDifficulty(HIGH);\n}",
    "code();",
    "new Relaxation( stress );",
    "self.getReflection();",
    "goals.visualize();",
    "priorities.sort();",
    "self.improve();",
    "console.log(future);",
    "priorities.sort();",
    "new Thought( past, present, future);",
    "relax();",
    "work.getInstancefrom( passion );",
    "idea.lock();\nexecute(idea);\nidea.unlock();",
    "friends.filter( friend => friend.type === 'real')",
    "patience.getInstance();",
    "new Chance();",
    "(life*)malloc( sizeof( dreams ) );",
    "happiness++;",
    "if ( angry ) {\n \t silentMode.on();\n}",
    "DELETE FROM thoughts WHERE category = 'negative'",
    "friends.filter( friend => friend.type === 'real')",
    "new Thought( past, present, future);",
    "study().then( execute ).then( succeed ).catch( retry );",
    "priorities.sort();",
    "INSERT INTO expectations (TYPE, Description)\nVALUES ('positive','It will be alright');",
    "self.respect();",
    "memories.push( today );",
    "await sign",
    "work.getInstancefrom( passion );",
    "(life*)malloc( sizeof( dreams ) );",
    "smile();",
    "work.getInstancefrom( passion );",
    "patience.getInstance();",
    "new Investment( self );",
    "const exams = university.getRest().Revise().Relax();",
    "Happy 11111100110;",
    "happiness++;",
    "self.teach();",
    "alert( 'Be Grateful' );",
    "cout<< past == future << endl;\n//outputs 0",
    "Happy 11111100110;",
    "smile();",
    "const exams = university.getRest().Revise().Relax();",
    "give.then( recieve );",
    "setGoal( name, time, significance);",
    "new Lesson( mistake );",
    "Happy 11111100110;",
    "new Investment( self );",
    "console.log(future);",
    "new Attitude( 'positive' );",
    "action.getFeedback();",
    "chances.forEach(chance => chance.take());",
    "self.respect();",
    "DELETE FROM myself WHERE emotion = 'hatered';",
    "relax();",
    "import {luck} from life",
    "nature.CleanUp();",
    "happiness++;",
    "new Skill( desire, time);",
    "console.log( 'HAPPINESS' );",
    "patience.getInstance();",
    "laziness.abort();",
    "comfortZone.push();",
    "new Lesson( mistake );",
    "overthink.init();\n//Internal Error: too much recursion",
    "smile();",
    "self.teach();",
    "idea.lock();\nexecute(idea);\nidea.unlock();",
    "alert('stay motivated!');",
    "happiness++;",
    "study.then(relax).catch(stress);",
    "await sign",
    "believe();",
    "doubt.terminate();",
    "quarantine.restrictions-- ;",
    "await sign",
    "world.Restore();",
    "happiness++;",
    "clearYourMind();",
    "sleep --;\nproductivity ++;",
    "const people = [ family, friends, lover ]\n spendQualityTime( people );",
    "if ( socialDistancing.isOver() ){\n\tpeople.hug();\n}",
    "alert('practice makes perfect')",
    "friends.filter( friend => friend.type === 'real')",
    "priorities.sort();",
    "sleep --;\nproductivity ++;",
    "read();",
    "SELECT * people WHERE attitude = 'good'",
    "(life*)malloc( sizeof( dreams ) );",
    "StressManager.flush();",
    "give();",
    "thoughts.filter( 'positive' );",
    "relax();",
    "(life*)malloc( sizeof( dreams ) );",
    "doubt.terminate();",
    "new Achievement( work, time);",
    "self.teach();",
    "give.then( recieve );",
    "new Day(optimism);",
    "new Skill( desire, time);",
    "(life*)malloc( sizeof( dreams ) );",
    "cout<< past == future << endl;\n//outputs 0",
    "new Inspiration( ideas );",
    "console.log(goals);",
    "doubt.terminate();",
    "friends.filter( friend => friend.type === 'real')",
    "happiness++;",
    "if ( angry ) {\n \t silentMode.on();\n}",
    "new Reality( dream );",
    "console.log( 'HAPPINESS' );",
    "happiness++;",
    "while( quarantine.length > 0 ){\n\t stayCalm();\n}",
    "study().then( execute ).then( succeed ).catch( retry );",
    "new Chance();",
    "new Media ( filter );",
    "DELETE FROM thoughts WHERE category = 'negative'",
    "new Chance();",
    "priorities.sort();",
    "stayHome();",
    "new Reality( dream );",
    "new Thought( past, present, future);",
    "await sign",
    "SELECT * people WHERE attitude = 'good'",
    "if ( angry ) {\n \t silentMode.on();\n}",
    "study.then(relax).catch(stress);",
    "const exams = university.getRest().Revise().Relax();",
    "(life*)malloc( sizeof( dreams ) );",
    "action.take( Time.now() );",
    "smile();",
    "const exams = university.getRest().Revise().Relax();",
    "DELETE FROM myself WHERE emotion = 'hatered';",
    "new Chance();",
    "happiness.getInstance();",
    "procrastination.end();",
    "sleep --;\nproductivity ++;",
    "bePatient();",
    "alert('practice makes perfect')",
    "study().then( execute ).then( succeed ).catch( retry );",
    "if ( socialDistancing.isOver() ){\n\tpeople.hug();\n}",
    "world.Restore();",
    "cout<< past == future << endl;\n//outputs 0",
    "if (self.getDoubt() > HEALTHY_THRESHHOLD){\n\tgoals.setDifficulty(HIGH);\n}",
    "void Overthinking(){\n\tOverthinking();\n}",
    "console.log(goals);",
    "garbageCollect();",
    "new Lesson( mistake );",
    "new Relaxation( stress );",
    "new Relaxation( stress );",
    "patience.getInstance();",
    "setGoal( name, time, significance);",
    "assertTrue(time.value > money.value);",
    "DELETE * FROM Memories WHERE type='bad';",
    "DELETE * FROM Memories WHERE type='bad';",
    "new Inspiration( ideas );",
    "alert('practice makes perfect')",
    "void Overthinking(){\n\tOverthinking();\n}",
    "happiness.getInstance();",
    "thoughts.filter( 'positive' );",
    "const exams = university.getRest().Revise().Relax();",
    "enjoy();",
    "garbageCollect();",
    "self.teach();",
    "alert('practice makes perfect')",
    "console.log( 'HAPPINESS' );",
    "happiness++;",
    "while( quarantine.length > 0 ){\n\t stayCalm();\n}",
    "smile. find( reason );",
    "assertTrue(time.value > money.value);",
    "setGoal( name, time, significance);",
    "quarantine.restrictions-- ;",
    "new Chance();",
    "DELETE * FROM Memories WHERE type='bad';",
    "focus();",
    "if ( socialDistancing.isOver() ){\n\tpeople.hug();\n}",
    "new Skill( desire, time);",
    "give();",
    "alert( 'Be Grateful' );",
    "procrastination.end();",
    "study().then( execute ).then( succeed ).catch( retry );",
    "quarantine.restrictions-- ;",
    "console.log( autodidacticism );\nconsole.log(autodidacticism == selfEducation);\n//Outputs 1",
    "StressManager.flush();",
    "new Relaxation( stress );",
    "give();",
    "garbageCollect();",
    "overthink.init();\n//Internal Error: too much recursion",
    "new Day(optimism);",
    "self.getReflection();",
    "INSERT INTO expectations (TYPE, Description)\nVALUES ('positive','It will be alright');",
    "work.getInstancefrom( passion );",
    "setGoal( name, time, significance);",
    "enjoy();",
    "setGoal( name, time, significance);",
    "happiness.getInstance();",
    "console.log(goals);",
    "StressManager.flush();",
    "alert( 'Be Grateful' );",
    "comfortZone.push();",
    "idea.lock();\nexecute(idea);\nidea.unlock();",
    "self.respect();",
    "code();",
    "believe();",
    "self.respect();",
    "garbageCollect();",
    "import {luck} from life",
    "happiness.getInstance();",
    "happiness++;",
    "new Reality( dream );",
    "const exams = university.getRest().Revise().Relax();",
    "action.take( Time.now() );",
    "new Attitude( 'positive' );",
    "getPurpose();",
    "new luck( work, consistency);",
    "clearYourMind();",
    "sleep --;\nproductivity ++;",
    "world.Restore();",
    "SELECT * people WHERE attitude = 'good'",
    "Happy 11111100110;",
    "assertTrue(time.value > money.value);",
    "thoughts.filter( 'positive' );",
    "const exams = university.getRest().Revise().Relax();",
    "StressManager.flush();",
    "cout<< past == future << endl;\n//outputs 0",
    "bePatient();",
    "goals.visualize();",
    "const exams = university.getRest().Revise().Relax();",
    "new Happiness( gratitude );",
    "void Overthinking(){\n\tOverthinking();\n}",
    "const people = [ family, friends, lover ]\n spendQualityTime( people );",
    "give.then( recieve );",
    "console.log(future);",
    "memories.push( today );",
    "friends.filter( friend => friend.type === 'real')",
    "idea.lock();\nexecute(idea);\nidea.unlock();",
    "smile();",
    "new Lesson( mistake );",
    "assertTrue(time.value > money.value);",
    "action.getFeedback();",
    "const exams = university.getRest().Revise().Relax();",
    "bePatient();",
    "patience.getInstance();",
    "comfortZone.push();",
    "sleep --;\nproductivity ++;",
    "enjoy();",
    "alert('practice makes perfect')",
    "new Relaxation( stress );",
    "chaos.sort();",
    "laziness.abort();",
    "idea.lock();\nexecute(idea);\nidea.unlock();",
    "thoughts.filter( 'positive' );"
  ],
};

module.exports = quotes;